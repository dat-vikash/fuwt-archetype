<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">


    <modelVersion>4.0.0</modelVersion>

    <groupId>org.fuwt</groupId>
    <artifactId>core-pom</artifactId>
    <version>1.8-SNAPSHOT</version>
    <name>core-pom</name>

    <packaging>pom</packaging>

    <modules>
        <module>integration-examples</module>
        <module>integration-quickstart-template</module>
        <module>integration-quickstart</module>
        <module>integration-libs</module>
        <module>web-libs</module>
        <module>security-libs</module>
    </modules>


    <properties>
        <spring.version>3.0.5.RELEASE</spring.version>
        <camel.version>2.7.0</camel.version>
        <logback.version>0.9.28</logback.version>
        <slf4j.version>1.6.1</slf4j.version>
        <hibernate.version>3.6.4.Final</hibernate.version>

        <git.user>${user.name}</git.user>
        <fuwt.repo>http://payments.dev.fuwt:8081/artifactory/repo</fuwt.repo>

        <fuwt.scm>scm:git:ssh://repositories.fuwt/var/git/fuwt-archetype.git</fuwt.scm>

        <hibernate.scope>compile</hibernate.scope>
        <tests.ignore.failure>true</tests.ignore.failure>
    </properties>

    <profiles>
        <!-- if we are deploying to jboss we don't want to include the hibernate jars in the war file -->
        <profile>
            <id>jboss-deploy</id>
            <properties>
                <hibernate.scope>provided</hibernate.scope>
            </properties>
        </profile>

        <!-- if we are building on CI server we  want to fail the build if tests fail -->
        <profile>
            <id>strict-testing</id>
            <properties>
                <tests.ignore.failure>false</tests.ignore.failure>
            </properties>
        </profile>

        <!-- Used only when invoking release:perform so as not to re-run
   tests as part of the deployment-->
        <profile>
            <id>release</id>
            <properties>
                <skipTests>true</skipTests>
            </properties>
        </profile>
    </profiles>

    <repositories>
        <repository>
            <id>fuwt-repo</id>
            <name>Freelancers Repository</name>
            <url>${fuwt.repo}</url>
        </repository>
    </repositories>


    <distributionManagement>
        <downloadUrl>${fuwt.repo}</downloadUrl>
        <repository>
            <uniqueVersion>false</uniqueVersion>
            <id>fuwt-release</id>
            <name>Freelancers Repository</name>
            <url>http://payments.dev.fuwt:8081/artifactory/libs-release-local</url>
            <layout>default</layout>
        </repository>
        <snapshotRepository>
            <uniqueVersion>true</uniqueVersion>
            <id>fuwt-snapshot</id>
            <name>Freelancers Snapshots</name>
            <url>http://payments.dev.fuwt:8081/artifactory/libs-snapshot-local</url>
            <layout>default</layout>
        </snapshotRepository>
    </distributionManagement>

    <scm>
        <url>${fuwt.scm}</url>
        <developerConnection>${fuwt.scm}</developerConnection>
        <connection>${fuwt.scm}</connection>
    </scm>


    <dependencyManagement>
        <dependencies>

            <!-- Spring web framework for creating web apps and services -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${spring.version}</version>
                <scope>compile</scope>
            </dependency>


            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-oxm</artifactId>
                <version>${spring.version}</version>
                <scope>compile</scope>
            </dependency>


            <!-- support for web service client and service interations, SOAP -->
            <dependency>
                <groupId>org.springframework.ws</groupId>
                <artifactId>spring-ws-core</artifactId>
                <version>2.0.0.RELEASE</version>
                <scope>compile</scope>
            </dependency>


            <!-- Dependency to support object to json mapping used in spring -->
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-mapper-asl</artifactId>
                <version>1.7.5</version>
                <scope>compile</scope>
            </dependency>

            <!-- Dependenct for template engine to be used for web view templates or
        generating specialized file formats -->
            <dependency>
                <groupId>org.freemarker</groupId>
                <artifactId>freemarker</artifactId>
                <version>2.3.14</version>
                <scope>compile</scope>
            </dependency>


            <!-- This is a rather powerful java based transformation engine
        for processing edi/object/xml/csv trandsformation -->
            <dependency>
                <groupId>org.milyn</groupId>
                <artifactId>milyn-smooks-all</artifactId>
                <version>1.4</version>
                <scope>compile</scope>
                <exclusions>
                    <exclusion>
                        <groupId>javax.persistence</groupId>
                        <artifactId>persistence-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>


            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>4.1.1</version>
            </dependency>


            <!-- Dependency for Apache Camel, integration framework -->
            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-core</artifactId>
                <version>${camel.version}</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-spring</artifactId>
                <version>${camel.version}</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-spring</artifactId>
                <version>${camel.version}</version>
                <scope>compile</scope>
            </dependency>


            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-jetty</artifactId>
                <version>${camel.version}</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-jaxb</artifactId>
                <version>${camel.version}</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-jms</artifactId>
                <version>${camel.version}</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <!-- supports scheduling of routes -->
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-quartz</artifactId>
                <version>${camel.version}</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-camel</artifactId>
                <version>5.2.0</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <!-- this packacge contains a special classloader needed for running camel in jboss-->
                <groupId>camel-jboss6</groupId>
                <artifactId>camel-jboss6</artifactId>
                <version>2.8</version>
                <scope>compile</scope>
            </dependency>

            <!--Packages needed for security -->
            <dependency>
                <groupId>org.springframework.security</groupId>
                <artifactId>spring-security-core</artifactId>
                <version>${spring.version}</version>
            </dependency>


            <dependency>
                <!-- encryption and decryption JCE provider -->
                <groupId>bouncycastle</groupId>
                <artifactId>bcprov-jdk15</artifactId>
                <version>140</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <!-- nice wrapper around JCE to perform some common password
             and security related tasks-->
                <groupId>org.jasypt</groupId>
                <artifactId>jasypt</artifactId>
                <version>1.7</version>
                <scope>compile</scope>
            </dependency>


            <!-- Servlet -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>servlet-api</artifactId>
                <version>2.5</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet.jsp</groupId>
                <artifactId>jsp-api</artifactId>
                <version>2.1</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>1.2</version>
                <scope>provided</scope>
            </dependency>


        </dependencies>
    </dependencyManagement>

    <dependencies>


        <!--  Joda Time -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>1.6.2</version>
            <scope>compile</scope>
        </dependency>

        <!-- Jackson JSON Mapper -->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.6.4</version>
            <scope>compile</scope>
        </dependency>

        <!-- Dependencies for spring (IoC container) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <!-- Including in core to support orm for out of the box frameeork-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- JBoss AS 5 deploy will break if you include the xercesImpl and xml-apis jars since
                 there are conflicting versions already included in the JBoss lib.
                 Configuring as provided here to prevent it from being pacakaged with
                 apps -->
        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>2.6.2</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
            <version>1.0.b2</version>
            <scope>provided</scope>
        </dependency>


        <!-- Dependency needed to support Spring implementation for @Configuration annotation -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>2.2</version>
            <scope>compile</scope>
        </dependency>


        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
            <scope>${hibernate.scope}</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
            <scope>${hibernate.scope}</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jpa</artifactId>
            <version>${camel.version}</version>
            <scope>compile</scope>
        </dependency>


        <!-- Dependency for JSR 303 (Validations) and hibernate implementation of JSR -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.0.0.GA</version>
            <scope>${hibernate.scope}</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>4.0.2.GA</version>
            <scope>${hibernate.scope}</scope>
        </dependency>

        <!-- Dependencies to handle logging -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-access</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
            <version>2.5.16</version>
            <scope>compile</scope>
        </dependency>


        <!-- Dependencies from here on are only needed for unit test and possibly some automated
          integration test execution -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.ws</groupId>
            <artifactId>spring-ws-test</artifactId>
            <version>2.0.1.RELEASE</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>net.javacrumbs</groupId>
            <artifactId>smock-easymock</artifactId>
            <version>0.4</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!-- simple to use in memory db instance -->
            <groupId>hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>1.8.0.10</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!-- This dependency only needs to be scoped test because we will rely on JNDI datasources
                 to access the DB once deployed in a production envrionment -->
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>8.4-702.jdbc4</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test</artifactId>
            <version>${camel.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!-- supports JNDI setup for testing in Jetty-->
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.4</version>
            <scope>test</scope>
        </dependency>


    </dependencies>

    <pluginRepositories>
        <pluginRepository>
            <id>twdata-m2-repository</id>
            <name>twdata.org Maven 2 Repository</name>
            <url>http://twdata-m2-repository.googlecode.com/svn/</url>
        </pluginRepository>
    </pluginRepositories>

    <build>


        <finalName>core-pom</finalName>

        <plugins>


            <!-- Reads from a properties file to allow for external configuration
                 of the Maven build -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0-alpha-2</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <quiet>true</quiet>
                            <files>
                                <file>/etc/${project.artifactId}/app.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin to be used for quick servelt container testing -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>maven-jetty-plugin</artifactId>
                <version>6.1.22</version>
                <configuration>
                    <useTestClasspath>true</useTestClasspath>
                    <jettyEnvXml>${project.basedir}/src/test/resources/WEB-INF/jetty-env.xml</jettyEnvXml>
                    <overrideWebXml>${project.basedir}/src/test/resources/WEB-INF/web-test.xml</overrideWebXml>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.twdata.maven</groupId>
                <artifactId>maven-cli-plugin</artifactId>
                <version>1.0.6</version>
            </plugin>

            <!-- Stock maven pluging declared here to configure java source and target version -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                </configuration>
            </plugin>

            <!-- Stock maven plugin for executing Unit Tests declared here to configure
            to not fail the build if the tests don't pass -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.8</version>
                <configuration>
                    <testFailureIgnore>${tests.ignore.failure}</testFailureIgnore>
                </configuration>
            </plugin>

            <!-- Stock maven plugin declared here to configure to not fail the build if the tests
          don't pass -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.8</version>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- will fork 1 process per test -->
                    <forkMode>always</forkMode>
                    <testFailureIgnore>${tests.ignore.failure}</testFailureIgnore>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.1</version>
                <configuration>
                    <preparationGoals>clean install</preparationGoals>
                    <goals>deploy -P release</goals>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>1.2</version>
            </plugin>


        </plugins>
    </build>


</project>
