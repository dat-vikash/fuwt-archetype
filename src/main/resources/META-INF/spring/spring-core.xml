<?xml version="1.0" encoding="UTF-8"?>
<!-- This configuration is the "main" Spring config which will import all the other configuration files and be home
to any core Spring configuration -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


    <context:annotation-config/>
    <!-- TODO Configure this with the packages in your project that should be scanned for annotations, wither
    Apache Camel or Spring
    -->
    <context:component-scan base-package="org.fuwt"/>

    <!-- reads properties files used to configure spring managed part of the app and the web.xml
         This configuration offers the most flexibility by first loading a default properties file
         that will be included in the project to allow development to have zero config on checkout.
         Second, it will attempt to load from etc an application properties file overriding any defaults.
         Third, you can pass in a system environment variable to java (i.e. -Dconfig=) to specify a properties
          file of your choice to act as the final config override-->
    <context:property-placeholder ignore-resource-not-found="true" ignore-unresolvable="true"/>
    <bean class="org.springframework.web.context.support.ServletContextPropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="searchContextAttributes" value="true"/>
        <property name="contextOverride" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:default.properties</value>
                <!-- TODO: replace with properties file name for your app -->
                <value>file:/etc/fuwt/app.properties</value>
                <value>${config}</value>
            </list>
        </property>
    </bean>

    <!-- uncomment to use jackson Java POJO to JSON mapper
    <bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
    -->


</beans>